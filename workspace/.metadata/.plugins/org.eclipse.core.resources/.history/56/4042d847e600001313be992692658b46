import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import net.sf.samtools.BAMRecord;
import net.sf.samtools.SAMFileHeader;
import net.sf.samtools.SAMFileReader;
import net.sf.samtools.SAMFileSource;
import net.sf.samtools.SAMFileSpan;
import net.sf.samtools.SAMFileWriter;
import net.sf.samtools.SAMFileWriterFactory;
import net.sf.samtools.SAMLineParser;
import net.sf.samtools.SAMRecord;
import net.sf.samtools.SAMRecordIterator;
import net.sf.samtools.SAMSequenceDictionary;

import java.lang.Object;
import java.util.ArrayList;

public class main_micro_RNA_vs_degradome {

	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
        
		Integer i,j,k,l;
		ArrayList <String> header =new ArrayList<String>();
		ArrayList <String> CigarString =new ArrayList<String>();   //Megmondja hogy milyen volt az egyez√©s.
		ArrayList <String> ReferenceName =new ArrayList<String>();
		ArrayList <Boolean> is_it_degradome =new ArrayList<Boolean>();
		ArrayList <Boolean> is_it_good_RNA =new ArrayList<Boolean>();
		ArrayList <Integer> ReferencePoz =new ArrayList<Integer>();
		ArrayList <Integer> CigarLen =new ArrayList<Integer>();
		ArrayList <Integer> ReadLength =new ArrayList<Integer>();
		ArrayList <Integer> len =new ArrayList<Integer>();
		ArrayList <Integer> degradome =new ArrayList<Integer>();
		ArrayList <Integer> micro_RNA =new ArrayList<Integer>();
		which_RNA_is_good a =new which_RNA_is_good();
		
		BufferedWriter out = new BufferedWriter(new FileWriter("/home/henrik/micro_RNA_VS_degradome/file.txt"));
		
		SAMFileReader.setDefaultValidationStringency(SAMFileReader.ValidationStringency.SILENT);
		
		@SuppressWarnings("resource")
		final SAMFileReader inputSam = new SAMFileReader(new File ("/home/henrik/micro_RNA_VS_degradome/germ2.bam"), true);

        
        SAMRecordIterator iter = inputSam.iterator();
		

		
		for (i=0; i<inputSam.getFileHeader().getSequenceDictionary().size(); i++){
            header.add(inputSam.getFileHeader().getSequence(i).getSequenceName());
            len.add(inputSam.getFileHeader().getSequence(i).getSequenceLength());
		} 

		
        while(iter.hasNext()){
			SAMRecord rec = iter.next();
			//CigarString.add(rec.getCigarString());
			CigarLen.add(rec.getCigarLength()); 		
			ReadLength.add(rec.getReadLength()); 		
			ReferenceName.add(rec.getReferenceName());
			is_it_degradome.add(rec.getSAMString().contains("degradome"));
			ReferencePoz.add(rec.getReferencePositionAtReadPosition(1));//???

		}

        
        
        
		is_it_good_RNA=a.good_RNA(CigarLen);
		
		for (j=0; j<len.size(); j++){
			for (i=0; i<len.get(j); i++){
				degradome.add(0);
				micro_RNA.add(0);
				out.write(ReferenceName.get(i)+" "+i+ "\n");
 
			}
		}	
		
		out.close();
		
	}




	
	
}
