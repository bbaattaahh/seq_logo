package org;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

public class main_peak_overlap {

	/**
	 * @param args
	 * @throws IOException 
	 */
	@SuppressWarnings({ "null", "resource" })
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub

		
		BufferedReader bf_d,bf_m;
		String s1="",s2="",s3="",file_degradome, file_micro_RNA, file="",save_micro_RNA="", save_degradome="";//"/home/henrik/micro_RNA_VS_degradome/teszt_peaks.txt";
		String line_d="", line_m="";
		Integer mode=0,j,i=0,m=1,counter=0;                                           //Az s1-s4 változókkla szedegetem ki az adatokat az input file-ból
		Double last_d=0.0,last_m=0.0;                                               //A save_... változókban vannak az output filok nevei.
		ArrayList<String>mRNA_Name=new ArrayList<String>();                         //Ezekben a dinamikus tömbökben tárolom az esetleges platókat!    
		ArrayList<Integer>mRNA_poz_d=new ArrayList<Integer>();                        //mode: ez mutatja meg hogy emelkedik vagy csökken a hupli!
		ArrayList<Integer>mRNA_poz_m=new ArrayList<Integer>();
		ArrayList<Double>norm_degradome=new ArrayList<Double>();
		ArrayList<Double>norm_micro_RNA=new ArrayList<Double>();
		HashMap<String, Integer> HM_degradome=new HashMap<String, Integer>();
		HashMap<String, Integer> HM_micro_RNA=new HashMap<String, Integer>();
		pozition_in_external_txt_file_HM HM_maker = new pozition_in_external_txt_file_HM();
		
		//help h = null;
		//BufferedWriter out_m = new BufferedWriter(new FileWriter(save));	
		String line;

	 	for (String s: args) {
	        if (s.equals("-help")){/*h.help_printer(); System.exit(0);*/}
	        if (s.equals("-file"))  {file=args[i+1];}
	        if (s.equals("-save_degradome"))  {save_degradome =args[i+1];}
	        if (s.equals("-save_micro_RNA"))  {save_micro_RNA =args[i+1];}
	        i++;
	 	}
	 	
        //file="/home/henrik/micro_RNA_VS_degradome/root1_micro_RNA_vs_degradome.txt";
	 	file_degradome="/home/henrik/micro_RNA_VS_degradome/root2_peaks_degradome.txt";
	 	file_micro_RNA="/home/henrik/micro_RNA_VS_degradome/root2_peaks_micro_RNA.txt";
	 	
		bf_m = new BufferedReader(new FileReader(file_degradome));
		bf_d = new BufferedReader(new FileReader(file_micro_RNA));
		
	 	
	 	//if (save_degradome.equals("")) {
	    //    save_degradome=file.replace("_micro_RNA_vs_degradome.txt", "_peaks_degradome.txt");
	 	//}
	 	
	 	//if (save_micro_RNA.equals("")) {
	    //    save_micro_RNA=file.replace("_micro_RNA_vs_degradome.txt", "_peaks_micro_RNA.txt");
	 	//}

	 	
	 	HM_degradome=HM_maker.get_pozitions(file_degradome);
	 	HM_micro_RNA=HM_maker.get_pozitions(file_micro_RNA);
		
		for(String key: HM_degradome.keySet()){
			if (HM_micro_RNA.containsKey(key)) {
					for (i=0; i<HM_degradome.get(key)+1; i++){
						line_d = bf_d.readLine();
					}
					    
					    line=line_d;
					    mRNA_poz_d.clear();
					
					while( ( line.equals(line_d))){
						m=1;	
			            
						s1="";
						s2="";
						s3="";
						//System.out.println(s1+s2+s3+s4);
						for (i=0; i<line.length(); i++){
							if (line.charAt(i)==' ') {m++; i++; if (i==line.length()) break; }
							if (m==1) {s1=s1+line.charAt(i);}
							if (m==2) {s2=s2+line.charAt(i);}
							if (m==3) {s3=s3+line.charAt(i);}

						}
						line_d = bf_d.readLine();
						mRNA_poz_d.add(Integer.parseInt(s2));
					}
					
					System.out.println(mRNA_poz_d);
					
					
					
					
					
					
					
					
					for (i=0; i<HM_micro_RNA.get(key)+1; i++){
						line_m = bf_m.readLine();
					}
					
					
					
					
				}

				System.out.println(key);
			}
			
		}
		
		
		
	}


