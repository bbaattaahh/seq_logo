package org;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

public class main_peak_overlap {

	/**
	 * @param args
	 * @throws IOException 
	 */
	@SuppressWarnings({ "null", "resource" })
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub

		
		BufferedReader bf_d,bf_m;
		String file_degradome, file_micro_RNA, file="",save_micro_RNA="", save_degradome="";//"/home/henrik/micro_RNA_VS_degradome/teszt_peaks.txt";
		Integer j,i=0,m=1,lapped_bases,OverlapStart,OverlapEnd;                                           //Az s1-s4 változókkla szedegetem ki az adatokat az input file-ból
		HashMap<String, ArrayList<Integer>> HM_degradome=new HashMap<String, ArrayList<Integer>>();
		HashMap<String, ArrayList<Integer>> HM_micro_RNA=new HashMap<String, ArrayList<Integer>>();
		pozition_in_external_txt_file_HM HM_maker = new pozition_in_external_txt_file_HM();
		NumberOfTheOverlapedBases ST=new NumberOfTheOverlapedBases();
		//help h = null;
		//BufferedWriter out = new BufferedWriter(new FileWriter());	

	 	for (String s: args) {
	        if (s.equals("-help")){/*h.help_printer(); System.exit(0);*/}
	        if (s.equals("-file"))  {file=args[i+1];}
	        if (s.equals("-save_degradome"))  {save_degradome =args[i+1];}
	        if (s.equals("-save_micro_RNA"))  {save_micro_RNA =args[i+1];}
	        i++;
	 	}
	 	
        //file="/home/henrik/micro_RNA_VS_degradome/root1_micro_RNA_vs_degradome.txt";
	 	//hogy hogy kell megadni a bemenő fájlok neveit ezt még körül kell hjárni HENRIK ÚR  
	 	file_degradome="/home/henrik/micro_RNA_VS_degradome/bti_germ_peaks_degradome.txt";
	 	file_micro_RNA="/home/henrik/micro_RNA_VS_degradome/bti_germ_peaks_micro_RNA.txt";
	 	

		
	 	
	 	//if (save_degradome.equals("")) {
	    //    save_degradome=file.replace("_micro_RNA_vs_degradome.txt", "_peaks_degradome.txt");
	 	//}
	 	
	 	//if (save_micro_RNA.equals("")) {
	    //    save_micro_RNA=file.replace("_micro_RNA_vs_degradome.txt", "_peaks_micro_RNA.txt");
	 	//}

	 	
    	HM_degradome=HM_maker.get_pozitions(file_degradome);
	 	HM_micro_RNA=HM_maker.get_pozitions(file_micro_RNA);
	 	
	 	System.out.println("Első kiiratás"+HM_degradome.get("comp57940_c0_seq1"));
	 	
	 	HM_degradome=HM_maker.telescope_the_int_arrays(HM_degradome);
	 	HM_micro_RNA=HM_maker.telescope_the_int_arrays(HM_micro_RNA);
	 	
	 	System.out.println("JÓZSI  "+HM_degradome.get("comp57940_c0_seq1"));
	 	System.out.println("JÓZSI  "+HM_micro_RNA.get("comp57940_c0_seq1"));

	 	
	 	System.out.println(ST.NumberOfTheOverlapedBases(20, 50, 2, 20));
		
	 	for(String key: HM_degradome.keySet()){
			if (HM_micro_RNA.containsKey(key)){
				for (i=0; i<HM_degradome.get(key).size()-1; i=i+2){
					for (j=0; j<HM_micro_RNA.get(key).size()-1; j=j+2){
						//System.out.println(i+" "+j);
                        lapped_bases=ST.NumberOfTheOverlapedBases(HM_degradome.get(key).get(i),HM_degradome.get(key).get(i+1),HM_micro_RNA.get(key).get(j),HM_micro_RNA.get(key).get(j+1));
     					if (lapped_bases>0){
     						OverlapStart=ST.OverlapStart(HM_degradome.get(key).get(i),HM_degradome.get(key).get(i+1),HM_micro_RNA.get(key).get(j),HM_micro_RNA.get(key).get(j+1));
     						OverlapEnd=ST.OverlapEnd(HM_degradome.get(key).get(i),HM_degradome.get(key).get(i+1),HM_micro_RNA.get(key).get(j),HM_micro_RNA.get(key).get(j+1));
                            System.out.println(key+" "+lapped_bases+" "+OverlapStart+" "+OverlapEnd);
                       }
                    }
				}
			}
		}
	 	

		}
		
		
		
	}


