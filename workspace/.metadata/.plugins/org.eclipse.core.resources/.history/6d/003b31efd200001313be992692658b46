import java.io.File;

import net.sf.samtools.BAMRecord;
import net.sf.samtools.SAMFileHeader;
import net.sf.samtools.SAMFileReader;
import net.sf.samtools.SAMFileSource;
import net.sf.samtools.SAMFileSpan;
import net.sf.samtools.SAMFileWriter;
import net.sf.samtools.SAMFileWriterFactory;
import net.sf.samtools.SAMLineParser;
import net.sf.samtools.SAMRecord;
import net.sf.samtools.SAMRecordIterator;
import net.sf.samtools.SAMSequenceDictionary;

import java.lang.Object;
import java.util.ArrayList;

public class main_micro_RNA_vs_degradome {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
        
		Integer i;
		ArrayList <String> header =new ArrayList<String>();
		ArrayList <String> CigarString =new ArrayList<String>();   //Megmondja hogy milyen volt az egyez√©s.
		ArrayList <Integer> CigarLen =new ArrayList<Integer>();
		ArrayList <Integer> ReadLength =new ArrayList<Integer>();
		ArrayList <Integer> len =new ArrayList<Integer>();
		ArrayList <Integer> first_poz =new ArrayList<Integer>();
		
		final File inputSamOrBamFile=new File ("/home/henrik/micro_RNA_VS_degradome/germ2.bam");
		SAMFileReader.setDefaultValidationStringency(SAMFileReader.ValidationStringency.SILENT);
		
		final SAMFileReader inputSam = new SAMFileReader(new File ("/home/henrik/micro_RNA_VS_degradome/germ2.bam"), true);
		final SAMFileReader inputSam2 = new SAMFileReader(new File ("/home/henrik/micro_RNA_VS_degradome/germ2.bam")); 
		final SAMFileSource input_record=new SAMFileSource (inputSam,null);
        final BAMRecord BAMR;
        
        SAMRecordIterator iter = inputSam.iterator();
		

		
		for (i=0; i<inputSam.getFileHeader().getSequenceDictionary().size(); i++){
			//System.out.println(inputSam.getFileHeader().getSequence(i).getSequenceName());
            header.add(inputSam.getFileHeader().getSequence(i).getSequenceName());
            len.add(inputSam.getFileHeader().getSequence(i).getSequenceLength());
            //inputSam.iterator();
            //seq.add(input_record());
 
            //System.out.println(input_record(inputSam, inputSam.getFilePointerSpanningReads().getContentsFollowing()));
            System.out.println(header.get(i));

           // System.out.println(len.get(i));
		} 

		
        while(iter.hasNext()){
			SAMRecord rec = iter.next();
			//CigarString.add(rec.getCigarString());
			//CigarLen.add(rec.getCigarLength()); 		
			//ReadLength().add(rec.getReadLength()()); 		
			
			//System.out.println(rec.getReferencePositionAtReadPosition(3));
			System.out.println(rec.getReadString());
		}
		
		
		
		
	}




	
	
}
