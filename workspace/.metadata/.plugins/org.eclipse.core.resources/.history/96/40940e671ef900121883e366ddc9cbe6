package org.seq;

import java.awt.Color;
import java.util.Random;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.security.Policy;
import java.text.AttributedCharacterIterator;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFrame;

import javax.imageio.ImageIO;

import org.seq.tomb;

public class png_maker {
    private static final boolean FALSE = false;
	public int x=2400;
    public int y=150;
    
//    png_maker(){
//		x = 640;
//		y = 480;
//	}	
    
    
    public void drawImage(HashMap<Character, ArrayList<Integer>> c, Integer n, Integer len, Integer counter, Integer lenx) throws IOException{
    
    Integer i=0;	
   	ArrayList<Integer> d=new ArrayList<Integer>();
   	ArrayList<Integer> high=new ArrayList<Integer>();    //Megmutatja, hogy a maximálisan felhasználható függőleges pielekből eddig mennyit használtunk fel.
   	ArrayList<Integer> wide=new ArrayList<Integer>();   //Megmutatja, hogy melyik pixelnél kezdődik a kírás természetesen hurizontálisan
   	ArrayList<Integer> max=new ArrayList<Integer>();   //Tárolja a legnagyobb előforfuláci számot egy adott oszlopra!
   	Random rand = new Random();

   	float r = rand.nextFloat();
   	float g = rand.nextFloat();
   	float b = rand.nextFloat();
   	
   	Color randomColor = new Color(r, g, b);
   	
   	
   	for (i=0; i<n; i++){high.add(0); wide.add(0); max.add(0);} //Kezdő értékek megadása.
   	wide.add(0);
   	



   	for(Character key: c.keySet()){
   	    d=c.get(key);
   		for (i=0; i<n; i++){
   			if (d.get(i)>max.get(i)) {max.set(i, d.get(i));}
   		}
   	}
   	
   	tomb elso    = new tomb();
   	
   	i=elso.sum(max);
 /*  	for (i=0; i<n; i++){ossz=ossz+max.get(i);}  //ossz:Mennyi teljes nagyságú karakterre van szükség
	ossz=ossz/8; //!!!!!!!!!!!!!!!Ezt még paraméterezni kell!!!!!
   ------Kell ez egyáltakán??-----------??????????*/	
   	
   	for (i=1; i<n+1; i++){
   	   wide.set(i, (wide.get(i-1)+max.get(i-1)*135/counter*80/140));
   	}
   	
   	x=wide.get(n)+1;
	BufferedImage image = new BufferedImage(x,y,BufferedImage.TYPE_INT_RGB);
 
	Graphics2D g2 = image.createGraphics();
	g2.setColor(Color.white);
    g2.setBackground(Color.white);
	for (i=0; i<=y; i++){
		g2.drawRect(0, 0, x, i);   	
	}
   	for(Character key: c.keySet()){
   	    d=c.get(key);
   	    
   	    
   	   	r = rand.nextFloat();
   	   	g = rand.nextFloat();
   	   	b = rand.nextFloat();
   	   	
   	   	randomColor = new Color(r, g, b);
   	    
   	    g2.setColor(randomColor);

   	    

   	    
   	    for (i=0; i<n; i++){
 
   	    	
   	 	    Font font = new Font(Font.MONOSPACED, Font.PLAIN, (d.get(i)*135/counter));
   	    	g2.setFont(font);
   	    	g2.drawString(String.valueOf(key), wide.get(i)+(max.get(i)-d.get(i))*135/counter/2*80/130, 100-(high.get(i)*100/135));

   	    
   	    	high.set(i, (d.get(i)*135/counter)+high.get(i));
   	    	if (d.get(i)==max.get(i)) {
   	    		Font font2 = new Font(Font.MONOSPACED, Font.PLAIN, 20);
   	   	    	g2.setFont(font2);
   	  	    	g2.drawString(String.valueOf(i+1), (wide.get(i)+wide.get(i+1))/2-5, 130);
   	    	}
   	    	PictureScaler aa=new PictureScaler();
   	    	
   	    	ImageIO.write(image, "png", new File("/home/henrik/Feltoltes/test.png"));
   	    	image=aa.getFasterScaledInstance(image, 2400, 200, RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR,FALSE);   	    	
   	    	ImageIO.write(image, "png", new File("/home/henrik/Feltoltes/test.png"));

   	    	//one_letter a=new one_letter();
   	    	//a.letter('A');
   	    	
   		    //ImageIO.write(image, "png", new File("/home/henrik/Feltoltes/test.png"));
   		}
   	}
	
	
	
	

    System.out.println(max);
    System.out.println(wide);
    }
	



}
